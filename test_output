
        Based on the provided unit tests, it appears that you need to implement methods in the `ElasticOrderService` class that filter orders based on date ranges and usernames. Below are the implementations for the methods `filterOrderByDate` and `filterOrderByUser`:


import .time.LocalDateTime;
import .util.*;
import .util.stream.Collectors;

public class ElasticOrderService {

    private final OrderDocumentRepository orderDocumentRepository;

    public ElasticOrderService(OrderDocumentRepository orderDocumentRepository) {
        this.orderDocumentRepository = orderDocumentRepository;
    }

    public Map<Long, List<OrderDocument>> filterOrderByDate(LocalDateTime startDate, LocalDateTime endDate) {
        List<OrderDocument> orders = orderDocumentRepository.findOrdersByDateBetween(startDate, endDate);
        return groupOrdersByUserId(orders);
    }

    public Map<Long, List<OrderDocument>> filterOrderByUser(String username, LocalDateTime startDate, LocalDateTime endDate) {
        List<OrderDocument> orders = orderDocumentRepository.findUserByUsername(username);
        List<OrderDocument> filteredOrders = orders.stream()
                .filter(order -> !order.getOrderDate().isBefore(startDate) && !order.getOrderDate().isAfter(endDate))
                .collect(Collectors.toList());
        return groupOrdersByUserId(filteredOrders);
    }

    private Map<Long, List<OrderDocument>> groupOrdersByUserId(List<OrderDocument> orders) {
        return
    }
    